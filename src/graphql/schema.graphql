scalar Date

# A user
type User {
    id: ID!

    email: String!

    firstName: String!

    lastName: String!

    jobs: [JobPosition]

    phone: String

    # url of its avatar
    avatar: String

    bitcoinAddress: String
    birthDate: Date
    address: Address
}

# A position of a user at a company
type JobPosition {
    id: ID!
    title: String!
    company: Company!
    descriptor: String
    type: String
    area: String
    phone: String
    email: String
    startDate: Date
}

# A company
type Company {
    id: ID!
    name: String!
    description: String!
    address: Address
    phone: String
    contact: User
}

# An address
type Address {
    id: ID!
    streetAddress: String!
    secondaryAddress: String
    zipCode: String!
    city: String!
    country: String!
    latitude: Float
    longitude: Float
}

input UserInput {
    id: ID!
    email: String
    firstName: String
    lastName: String
    phone: String
    avatar: String
    bitcoinAddress: String
    birthDate: Date
}

input JobPositionInput {
    id: ID!
    title: String
    descriptor: String
    type: String
    area: String
    phone: String
    email: String
    startDate: Date
}

input CompanyInput {
    id: ID!
    name: String
    description: String
    phone: String
}

input AddressInput {
    id: ID!
    streetAddress: String
    secondaryAddress: String
    zipCode: String
    city: String
    country: String
    latitude: Float
    longitude: Float
}


type Query {
    # Retrieve a single user providing its id
    user(id: ID!): User

    # Retrieve a list of users
    users(
        # Number of records to retrieve
        first:Int

        # Only retrieve users coming after the given one in the default order
        after:ID

        # Only return users with a name matching the given string
        matching:String
    ): [User]
}

type Mutation {
    updateAddress(addressInput: AddressInput): Address
    updateCompany(companyInput: CompanyInput): Company
    updateJobPosition(jobPositionInput: JobPositionInput): JobPosition
    updateUser(userInput: UserInput): User
}

schema {
    query: Query
    mutation: Mutation
}
